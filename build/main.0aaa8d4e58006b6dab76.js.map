{"version":3,"sources":["webpack:///./js/fetchWeather.js","webpack:///./index.js","webpack:///./js/getGeoPosition.js"],"names":["fetchWeather","query","fetch","baseUrl","WeatherPlugin","this","lat","long","refs","inputCity","document","querySelector","buttonSubmit","section","icon","location","temp","humidity","wind","conditions","currentLocation","searchByCity","options","_this","maximumAge","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","then","data","coords","latitude","longitude","currentWeather","catch","PNotify","alert","_this2","res","json","render","_this3","addEventListener","e","preventDefault","value","textContent","name","current","temp_c","wind_kph","condition","text","src","classList","remove"],"mappings":"2LAAe,SAASA,EAAaC,GAGnC,OAAOC,MAASC,8EAAwBF,GCiE1B,eA1Dd,SAAAG,IACEC,KAAKC,IAAM,KACXD,KAAKE,KAAO,KACZF,KAAKG,KAAO,CACVC,UAAWC,SAASC,cAAc,sBAClCC,aAAcF,SAASC,cAAc,yBACrCE,QAASH,SAASC,cAAc,YAChCG,KAAMJ,SAASC,cAAc,SAC7BI,SAAUL,SAASC,cAAc,+BACjCK,KAAMN,SAASC,cAAc,2BAC7BM,SAAUP,SAASC,cAAc,+BACjCO,KAAMR,SAASC,cAAc,2BAC7BQ,WAAYT,SAASC,cAAc,kCAErCN,KAAKe,kBACLf,KAAKgB,0CAGPD,gBAAA,WAAkB,IC3BZE,ED2BYC,EAAAlB,MC3BZiB,EAAU,CACdE,WAAY,MAGP,IAAIC,QAAQ,SAACC,EAASC,GAC3BC,UAAUC,YAAYC,mBAAmBJ,EAASC,EAAQL,MDwBvDS,KAAK,SAAAC,GACJT,EAAKjB,IAAM0B,EAAKC,OAAOC,SACvBX,EAAKhB,KAAOyB,EAAKC,OAAOE,UACxBZ,EAAKa,mBAENC,MAAM,kBACLC,IAAQC,MACN,0EAKRH,eAAA,WAAiB,IAAAI,EAAAnC,KACfL,EAAgBK,KAAKC,IAAT,IAAgBD,KAAKE,MAC9BwB,KAAK,SAAAU,GAAG,OAAIA,EAAIC,SAChBX,KAAK,SAAAC,GAAI,OAAIQ,EAAKG,OAAOX,QAG9BX,aAAA,WAAe,IAAAuB,EAAAvC,KACbA,KAAKG,KAAKI,aAAaiC,iBAAiB,QAAS,SAAAC,GAC/CA,EAAEC,iBACF/C,EAAa4C,EAAKpC,KAAKC,UAAUuC,OAC9BjB,KAAK,SAAAU,GAAG,OAAIA,EAAIC,SAChBX,KAAK,SAAAC,GAAI,OAAIY,EAAKD,OAAOX,UAIhCW,OAAA,SAAOX,GACL3B,KAAKG,KAAKO,SAASkC,YAAcjB,EAAKjB,SAASmC,KAC/C7C,KAAKG,KAAKQ,KAAKiC,YAAcjB,EAAKmB,QAAQC,OAAS,KACnD/C,KAAKG,KAAKS,SAASgC,YAAcjB,EAAKmB,QAAQlC,SAAW,IACzDZ,KAAKG,KAAKU,KAAK+B,YAAcjB,EAAKmB,QAAQE,SAAW,OACrDhD,KAAKG,KAAKW,WAAW8B,YAAcjB,EAAKmB,QAAQG,UAAUC,KAC1DlD,KAAKG,KAAKM,KAAK0C,IAAM,SAAWxB,EAAKmB,QAAQG,UAAUxC,KACvDT,KAAKG,KAAKK,QAAQ4C,UAAUC,OAAO","file":"main.0aaa8d4e58006b6dab76.js","sourcesContent":["export default function fetchWeather(query) {\r\n  const baseUrl = 'https://api.apixu.com/v1/current.json';\r\n  const key = '1890115529e84a47b6784833190608';\r\n  return fetch(`${baseUrl}?key=${key}&q=${query}`);\r\n}\r\n","import './styles.css';\r\nimport PNotify from 'pnotify/dist/es/PNotify';\r\nimport PNotifyButtons from 'pnotify/dist/es/PNotifyButtons';\r\n\r\nimport currentPosition from './js/getGeoPosition';\r\nimport fetchWeather from './js/fetchWeather';\r\n\r\n\r\n\r\nclass WeatherPlugin {\r\n  constructor() {\r\n    this.lat = null;\r\n    this.long = null;\r\n    this.refs = {\r\n      inputCity: document.querySelector('input[name=\"city\"]'),\r\n      buttonSubmit: document.querySelector('button[type=\"submit\"]'),\r\n      section: document.querySelector('#weather'),\r\n      icon: document.querySelector('.icon'),\r\n      location: document.querySelector('span[data-field=\"location\"]'),\r\n      temp: document.querySelector('span[data-field=\"temp\"]'),\r\n      humidity: document.querySelector('span[data-field=\"humidity\"]'),\r\n      wind: document.querySelector('span[data-field=\"wind\"]'),\r\n      conditions: document.querySelector('span[data-field=\"conditions\"]'),\r\n    };\r\n    this.currentLocation();\r\n    this.searchByCity();\r\n  }\r\n\r\n  currentLocation() {\r\n    currentPosition()\r\n      .then(data => {\r\n        this.lat = data.coords.latitude;\r\n        this.long = data.coords.longitude;\r\n        this.currentWeather();\r\n      })\r\n      .catch(() =>\r\n        PNotify.alert(\r\n          'Нет прав доступа к геопозиции, используйте поиск по имени города.',\r\n        ),\r\n      );\r\n  }\r\n\r\n  currentWeather() {\r\n    fetchWeather(`${this.lat},${this.long}`)\r\n      .then(res => res.json())\r\n      .then(data => this.render(data));\r\n  }\r\n\r\n  searchByCity() {\r\n    this.refs.buttonSubmit.addEventListener('click', e => {\r\n      e.preventDefault();\r\n      fetchWeather(this.refs.inputCity.value)\r\n        .then(res => res.json())\r\n        .then(data => this.render(data));\r\n    });\r\n  }\r\n\r\n  render(data) {\r\n    this.refs.location.textContent = data.location.name;\r\n    this.refs.temp.textContent = data.current.temp_c + '°C';\r\n    this.refs.humidity.textContent = data.current.humidity + '%';\r\n    this.refs.wind.textContent = data.current.wind_kph + ' kph';\r\n    this.refs.conditions.textContent = data.current.condition.text;\r\n    this.refs.icon.src = 'https:' + data.current.condition.icon;\r\n    this.refs.section.classList.remove('is-hidden');\r\n  }\r\n}\r\n\r\nconst weather = new WeatherPlugin();\r\n","export default function getGeoPosition() {\r\n  const options = {\r\n    maximumAge: 1800000,\r\n  };\r\n\r\n  return new Promise((resolve, reject) => {\r\n    navigator.geolocation.getCurrentPosition(resolve, reject, options);\r\n  });\r\n}\r\n"],"sourceRoot":""}